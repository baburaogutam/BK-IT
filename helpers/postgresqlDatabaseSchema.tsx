/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type ExperienceLevel = "entry" | "junior" | "lead" | "mid" | "senior";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type JobType = "contract" | "full-time" | "internship" | "part-time";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export type UserRole = "admin" | "user";

export interface ContactInquiries {
  company: string | null;
  createdAt: Generated<Timestamp | null>;
  email: string;
  id: Generated<number>;
  message: string | null;
  name: string;
  phone: string | null;
  serviceInterest: string | null;
}

export interface Jobs {
  applicationUrl: string | null;
  benefits: string | null;
  company: string;
  contactEmail: string | null;
  createdAt: Generated<Timestamp | null>;
  createdBy: number;
  description: string;
  experienceLevel: ExperienceLevel;
  id: Generated<number>;
  isActive: Generated<boolean | null>;
  jobType: JobType;
  location: string;
  requirements: string;
  salaryRange: string | null;
  title: string;
  updatedAt: Generated<Timestamp | null>;
}

export interface LoginAttempts {
  attemptedAt: Generated<Timestamp | null>;
  email: string;
  success: boolean;
  userId: number | null;
}

export interface Sessions {
  createdAt: Generated<Timestamp>;
  expiresAt: Timestamp;
  id: string;
  lastAccessed: Generated<Timestamp>;
  userId: number;
}

export interface UserPasswords {
  passwordHash: string;
  userId: number;
}

export interface Users {
  avatarUrl: string | null;
  createdAt: Generated<Timestamp | null>;
  displayName: string;
  email: string;
  id: Generated<number>;
  role: Generated<UserRole | null>;
}

export interface DB {
  contactInquiries: ContactInquiries;
  jobs: Jobs;
  loginAttempts: LoginAttempts;
  sessions: Sessions;
  userPasswords: UserPasswords;
  users: Users;
}


// Use these for zod schema enums or other purposes, since the kysely enums are just types
export const UserRoleArrayValues: [UserRole, ...UserRole[]] = ["admin","user"];
export const JobTypeArrayValues: [JobType, ...JobType[]] = ["contract","full-time","internship","part-time"];
export const ExperienceLevelArrayValues: [ExperienceLevel, ...ExperienceLevel[]] = ["entry","junior","lead","mid","senior"];
// Note: kysely maps the table/column/enum names from snake_case to camelCase and PascalCase. When running SQL statements, make sure to use snake_case, but TypeScript code should use camelCase or PascalCase.